generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = "mongodb+srv://rodriguereseau:vVBxZfU2lo3q8HNo@rph.kc2scxt.mongodb.net/staging"
}

enum Role {
    ADMIN
    REDACTOR
    SPEAKER
    USER
}

model Evenement {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    content   String
    startDate DateTime
    startTime String
    address   String
    picture   String?
    users     Json[]   @default([])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FailedLoginAttempts {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    userEmail String
    attempts  Int
}

model LockoutInformation {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    userEmail    String
    lockoutUntil DateTime
}

model Mail {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String
    token     String
    type      String
    createdAt DateTime @default(now())
}

model Payment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    eventId   String   @db.ObjectId
    event     Json
    amount    Int
    status    String
    startDate DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Session {
    id           String    @id @default(auto()) @map("_id") @db.ObjectId
    userId       String    @unique @db.ObjectId
    user         User      @relation(fields: [userId], references: [id]) // relation one to one
    refreshToken String
    lastUsed     DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}

model Subscription {
    id            String  @id @default(auto()) @map("_id") @db.ObjectId
    userId        String  @unique @db.ObjectId
    user          User    @relation(fields: [userId], references: [id])
    stripeId      String  @unique
    stripeStatus  String?
    stripePriceId String?
    quantity      Int?
    trialEndsAt   Int?
    endsAt        Int?
    startDate     Int
    lastEventDate Int
}

model User {
    id               String        @id @default(auto()) @map("_id") @db.ObjectId
    stripeCustomerId String?
    role             Role          @default(USER)
    email            String        @unique
    firstName        String
    lastName         String
    password         String
    isVerified       Boolean       @default(false)
    isBanned         Boolean       @default(false)
    birthDate        DateTime?
    job              String?
    description      String?
    address          String?
    city             String?
    country          String?
    phone            String?
    avatar           String?
    language_1       String?
    language_2       String?
    Subscription     Subscription?
    // evenementId      String?       @db.ObjectId
    // Evenement        Evenement?    @relation(fields: [evenementId], references: [id])
    sessions         Session[]
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt
}
